#include <string>
#include <map>
#include <list>

#include <gtest/gtest.h>

#include "../src/digest/sha1_digest.h"

using namespace jcu::random;

// Sha1DigestTest
namespace {

class Sha1DigestTest : public ::testing::Test {};

TEST(Sha1DigestTest, vectorMatchTest) {
  Sha1Digest digest;
  std::vector<unsigned char> a({ 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d });
  std::vector<unsigned char> b({ 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d });
  std::vector<unsigned char> c(20);

  EXPECT_EQ(a, b);
  EXPECT_NE(a, c);
}

TEST(Sha1DigestTest, testVector01Alpha) {
  Sha1Digest digest;
  std::vector<unsigned char> expected_value({ 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d });
  std::vector<unsigned char> hash(20);
  digest.reset();
  digest.update("abc", 3);
  digest.final(hash.data());

  EXPECT_EQ(hash, expected_value);
}

TEST(Sha1DigestTest, testVector01Beta) {
  Sha1Digest digest;
  std::vector<unsigned char> expected_value({ 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d });
  std::vector<unsigned char> hash(20);
  digest.reset();
  digest.update("a", 1);
  digest.update("bc", 2);
  digest.final(hash.data());

  EXPECT_EQ(hash, expected_value);
}

} // namespace
